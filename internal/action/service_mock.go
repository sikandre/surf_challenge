// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=action
//

// Package action is a generated GoMock package.
package action

import (
	context "context"
	reflect "reflect"
	domain "surf_challenge/internal/action/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetActionByUserID mocks base method.
func (m *MockService) GetActionByUserID(ctx context.Context, userID int64) ([]*domain.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionByUserID indicates an expected call of GetActionByUserID.
func (mr *MockServiceMockRecorder) GetActionByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionByUserID", reflect.TypeOf((*MockService)(nil).GetActionByUserID), ctx, userID)
}

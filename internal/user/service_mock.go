// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=user
//

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"
	domain "surf_challenge/internal/user/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// QueryUsers mocks base method.
func (m *MockService) QueryUsers(ctx context.Context, query domain.Query) ([]*domain.User, *domain.Results, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUsers", ctx, query)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(*domain.Results)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryUsers indicates an expected call of QueryUsers.
func (mr *MockServiceMockRecorder) QueryUsers(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUsers", reflect.TypeOf((*MockService)(nil).QueryUsers), ctx, query)
}
